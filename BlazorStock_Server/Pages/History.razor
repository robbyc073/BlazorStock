@page "/history"
@using BlazorStock.Server.Entities.Models
@inject IStockTransactionRepository _tSRepository

<PageTitle>History</PageTitle>

<h1>Your Transaction History (MudTable)</h1>

<MudTable Items="@transactions" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Symbol</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Qty</MudTh>
        <MudTh>Total</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.TransactionId</MudTd>
        <MudTd DataLabel="Symbol">@context.Symbol</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Qty">@context.Quantity</MudTd>
        <MudTd DataLabel="Total">@context.Total</MudTd>
    </RowTemplate>
</MudTable>
<br />
<br />

<h1>Your Transaction History (MudDataGrid)</h1>

<MudDataGrid T="StockTransactionDTO" MultiSelection="true" Items="@transactions" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Your Transaction History</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="StockTransactionDTO" />
        <Column T="StockTransactionDTO" Field="UserId" Title="User ID" Sortable="false" Filterable="false" />
        <Column T="StockTransactionDTO" Field="Symbol" />
        <Column T="StockTransactionDTO" Field="Quantity" SortBy="@_sortBy" />
        <Column T="StockTransactionDTO" Field="Price" />
        <Column T="StockTransactionDTO" Field="Total" Title="Total" />
        <Column T="StockTransactionDTO" Field="TransactionType" Title="Tansaction Type" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="StockTransactionDTO" />
    </PagerContent>
    </MudDataGrid>



@code {
    public IEnumerable<StockTransactionDTO> transactions { get; set; }

    protected override async Task OnInitializedAsync() => transactions = _tSRepository.GetAll();

    private string _searchString;
    private bool _sortNameByLength = false;
    private List<string> _events = new();
    // custom sort by name length
    private Func<StockTransactionDTO, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Symbol.Length;
        else
            return x.Symbol;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<StockTransactionDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.TransactionType.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Symbol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Price} {x.Quantity} {x.Total}".Contains(_searchString))
            return true;

        return false;
    };

     // events
    void RowClicked(DataGridRowClickEventArgs<StockTransactionDTO> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<StockTransactionDTO> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }



}
